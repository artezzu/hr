import { useEffect } from 'react';
import { config } from '@/config';
import { toast } from 'react-hot-toast';
import { useRouter } from 'next/navigation';

interface Notification {
  id: number;
  message: string;
  task_id: number | null;
  vacancy_id: number | null;
  created_at: string;
  is_read: boolean;
}

export default function NotificationListener() {
  const router = useRouter();

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  const checkForNotifications = async () => {
    try {
      const token = localStorage.getItem('token');
      if (!token) return;

      const response = await fetch(`${config.apiUrl}/notifications/`, {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });

      if (!response.ok) throw new Error('Failed to fetch notifications');

      const notifications = await response.json();
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∫ —Ç–æ—Å—Ç—ã
      notifications.forEach((notification: Notification) => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–ª–∏ –ª–∏ –º—ã —É–∂–µ —ç—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        const shownKey = `notification_shown_${notification.id}`;
        const alreadyShown = localStorage.getItem(shownKey);
        
        if (!alreadyShown) {
          // –°–æ–∑–¥–∞–µ–º ID –¥–ª—è —Ç–æ—Å—Ç–∞
          const toastId = `notification-${notification.id}`;
          
          // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–≤—è–∑–∞–Ω–Ω–∞—è –≤–∞–∫–∞–Ω—Å–∏—è –∏–ª–∏ –∑–∞–¥–∞—á–∞
          const hasRelatedItem = notification.vacancy_id || notification.task_id;
          
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
          toast(
            <div>
              <p>{notification.message}</p>
              <div className="mt-2 flex gap-2">
                <button 
                  className="px-2 py-1 bg-blue-500 text-white text-xs rounded"
                  onClick={() => {
                    markAsRead(notification.id);
                    toast.dismiss(toastId);
                  }}
                >
                  –û—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–º
                </button>
                {hasRelatedItem && (
                  <button
                    className="px-2 py-1 bg-indigo-500 text-white text-xs rounded"
                    onClick={() => {
                      markAsRead(notification.id);
                      toast.dismiss(toastId);
                      
                      // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
                      if (notification.vacancy_id) {
                        router.push('/dashboard/vacancies');
                      } else if (notification.task_id) {
                        router.push('/dashboard/tasks');
                      }
                    }}
                  >
                    –ü–µ—Ä–µ–π—Ç–∏
                  </button>
                )}
              </div>
            </div>,
            {
              duration: 10000,
              icon: notification.vacancy_id ? 'üíº' : '‚è∞',
              id: toastId
            }
          );
          
          // –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ —ç—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É–∂–µ –ø–æ–∫–∞–∑–∞–Ω–æ
          localStorage.setItem(shownKey, 'true');
        }
      });
    } catch (error) {
      console.error('Error checking for notifications:', error);
    }
  };

  // –û—Ç–º–µ—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
  const markAsRead = async (id: number) => {
    try {
      const token = localStorage.getItem('token');
      if (!token) return;

      await fetch(`${config.apiUrl}/notifications/${id}/read`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });
    } catch (error) {
      console.error('Error marking notification as read:', error);
    }
  };

  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  useEffect(() => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å—Ä–∞–∑—É –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    checkForNotifications();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    const interval = setInterval(checkForNotifications, 30000);
    
    return () => clearInterval(interval);
  }, []);

  // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –Ω–∏–∫–∞–∫–æ–≥–æ UI
  return null;
} 