import os
import logging
import aiohttp
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from sqlalchemy.orm import Session
from database import SessionLocal
import models
import schemas
import re
from datetime import datetime
from transliterate import translit
from pathlib import Path
import unicodedata
from config import BOT_TOKEN, API_URL

load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è chat_id –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
candidate_chat_ids = {}

# –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤–∞–∫–∞–Ω—Å–∏–π —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏
VACANCIES = {
    'production': {
        'positions': {
            'mechanic': {
                'title': {'ru': '–°–ª–µ—Å–∞—Ä—å', 'uz': 'Chilangar'},
                'description': {
                    'ru': '–†–∞–±–æ—Ç–∞ —Å–æ —Å—Ç–∞–Ω–∫–∞–º–∏ –∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ–º',
                    'uz': 'Stanoklar va uskunalar bilan ishlash'
                },
                'requirements': {
                    'ru': '- –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –æ—Ç 1 –≥–æ–¥–∞\n- –ó–Ω–∞–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏',
                    'uz': '- 1 yillik ish tajribasi\n- Texnik hujjatlarni bilish'
                },
                'conditions': {
                    'ru': '- –û—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–µ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ\n- –ü–æ–ª–Ω—ã–π —Å–æ—Ü–ø–∞–∫–µ—Ç',
                    'uz': '- Rasmiy ishga joylashish\n- To\'liq ijtimoiy paket'
                },
                'schedule': {
                    'ru': '5/2, —Å 9:00 –¥–æ 18:00',
                    'uz': '5/2, 9:00 dan 18:00 gacha'
                }
            },
            'operator': {
                'title': {'ru': '–û–ø–µ—Ä–∞—Ç–æ—Ä —Å—Ç–∞–Ω–∫–∞', 'uz': 'Stanok operatori'},
                'description': {
                    'ru': '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–º –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ–º',
                    'uz': 'Ishlab chiqarish uskunalarini boshqarish'
                },
                'requirements': {
                    'ru': '- –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –æ—Ç 2 –ª–µ—Ç\n- –ó–Ω–∞–Ω–∏–µ –ß–ü–£ —Å—Ç–∞–Ω–∫–æ–≤',
                    'uz': '- 2 yillik ish tajribasi\n- CNC stanoklar bilimi'
                },
                'conditions': {
                    'ru': '- –û—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–µ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ\n- –ü–æ–ª–Ω—ã–π —Å–æ—Ü–ø–∞–∫–µ—Ç',
                    'uz': '- Rasmiy ishga joylashish\n- To\'liq ijtimoiy paket'
                },
                'schedule': {
                    'ru': '5/2, —Å 9:00 –¥–æ 18:00',
                    'uz': '5/2, 9:00 dan 18:00 gacha'
                }
            }
        }
    },
    'office': {
        'positions': {
            'manager': {
                'title': {'ru': '–ú–µ–Ω–µ–¥–∂–µ—Ä', 'uz': 'Menejer'},
                'description': {
                    'ru': '–†–∞–±–æ—Ç–∞ —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏ –∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π',
                    'uz': 'Mijozlar va hujjatlar bilan ishlash'
                },
                'requirements': {
                    'ru': '- –í—ã—Å—à–µ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ\n- –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –æ—Ç 1 –≥–æ–¥–∞',
                    'uz': '- Oliy ma\'lumot\n- 1 yillik ish tajribasi'
                },
                'conditions': {
                    'ru': '- –û—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–µ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ\n- –ü–æ–ª–Ω—ã–π —Å–æ—Ü–ø–∞–∫–µ—Ç',
                    'uz': '- Rasmiy ishga joylashish\n- To\'liq ijtimoiy paket'
                },
                'schedule': {
                    'ru': '5/2, —Å 9:00 –¥–æ 18:00',
                    'uz': '5/2, 9:00 dan 18:00 gacha'
                }
            },
            'accountant': {
                'title': {'ru': '–ë—É—Ö–≥–∞–ª—Ç–µ—Ä', 'uz': 'Hisobchi'},
                'description': {
                    'ru': '–í–µ–¥–µ–Ω–∏–µ –±—É—Ö–≥–∞–ª—Ç–µ—Ä—Å–∫–æ–≥–æ —É—á–µ—Ç–∞',
                    'uz': 'Buxgalteriya hisobini yuritish'
                },
                'requirements': {
                    'ru': '- –í—ã—Å—à–µ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ\n- –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –æ—Ç 3 –ª–µ—Ç',
                    'uz': '- Oliy ma\'lumot\n- 3 yillik ish tajribasi'
                },
                'conditions': {
                    'ru': '- –û—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–µ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ\n- –ü–æ–ª–Ω—ã–π —Å–æ—Ü–ø–∞–∫–µ—Ç',
                    'uz': '- Rasmiy ishga joylashish\n- To\'liq ijtimoiy paket'
                },
                'schedule': {
                    'ru': '5/2, —Å 9:00 –¥–æ 18:00',
                    'uz': '5/2, 9:00 dan 18:00 gacha'
                }
            }
        }
    }
}

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class Form(StatesGroup):
    choosing_language = State()
    choosing_direction = State()  # –í—ã–±–æ—Ä –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ/–æ—Ñ–∏—Å)
    choosing_vacancy = State()    # –í—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏
    viewing_vacancy = State()     # –ü—Ä–æ—Å–º–æ—Ç—Ä –æ–ø–∏—Å–∞–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏
    full_name = State()
    birth_date = State()
    position = State()
    specialization = State()
    education = State()
    citizenship = State()
    experience = State()
    city = State()
    phone = State()
    languages = State()
    source = State()
    upload_resume = State()
    preview_data = State()
    WaitingForMessage = State()

# –¢–µ–∫—Å—Ç—ã –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–∞—Ö
TEXTS = {
    'ru': {
        'welcome': """
üè¢ *Orient Metal* - –í–∞—à –Ω–∞–¥–µ–∂–Ω—ã–π –ø–∞—Ä—Ç–Ω–µ—Ä –≤ —Å—Ñ–µ—Ä–µ –º–µ—Ç–∞–ª–ª–æ–æ–±—Ä–∞–±–æ—Ç–∫–∏!

*–û –Ω–∞—Å:*
üìà –î–∏–Ω–∞–º–∏—á–Ω–æ —Ä–∞–∑–≤–∏–≤–∞—é—â–∞—è—Å—è –∫–æ–º–ø–∞–Ω–∏—è
üõ† –°–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ
üåü –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ü–∏–∏
ü§ù –ù–∞–¥–µ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤

*–ù–∞—à–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:*
‚úÖ –û–ø—ã—Ç–Ω—ã–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã
‚úÖ –°–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ
‚úÖ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥
‚úÖ –í—ã–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è

*–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ!*
üë• –ú—ã –∏—â–µ–º —Ç–∞–ª–∞–Ω—Ç–ª–∏–≤—ã—Ö –∏ –º–æ—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤.
        """,
        'agreement_text': """
–ü–µ—Ä–µ–¥ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ–º –∞–Ω–∫–µ—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ–º –æ–± –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.

–ù–∞–∂–∏–º–∞—è –∫–Ω–æ–ø–∫—É "–ü—Ä–∏–Ω–∏–º–∞—é", –≤—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ, —á—Ç–æ:
1. –î–∞–µ—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–∞—à–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
2. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
3. –°–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å —É—Å–ª–æ–≤–∏—è–º–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        """,
        'accept_agreement': "‚úÖ –ü—Ä–∏–Ω–∏–º–∞—é",
        'decline_agreement': "‚ùå –ù–µ –ø—Ä–∏–Ω–∏–º–∞—é",
        'download_agreement': "üìÑ –°–∫–∞—á–∞—Ç—å –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ–≥–ª–∞—à–µ–Ω–∏—è",
        'agreement_declined': "–ë–µ–∑ —Å–æ–≥–ª–∞—Å–∏—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –º—ã –Ω–µ –º–æ–∂–µ–º –ø—Ä–∏–Ω—è—Ç—å –≤–∞—à—É –∞–Ω–∫–µ—Ç—É",
        'choose_language': "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Tilni tanlang:",
        'enter_fullname': "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –§–ò–û –ø–æ–ª–Ω–æ—Å—Ç—å—é:",
        'enter_birthdate': "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–¥–¥.–º–º.–≥–≥–≥–≥):",
        'enter_position': "–ù–∞ –∫–∞–∫—É—é –¥–æ–ª–∂–Ω–æ—Å—Ç—å –≤—ã –ø—Ä–µ—Ç–µ–Ω–¥—É–µ—Ç–µ?",
        'enter_speciality': "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à—É —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å:",
        'enter_education': "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ:",
        'enter_citizenship': "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ:",
        'enter_experience': "–û–ø–∏—à–∏—Ç–µ –í–∞—à –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã:",
        'enter_location': "–£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è:",
        'enter_phone': "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
        'enter_languages': "–ö–∞–∫–∏–º–∏ —è–∑—ã–∫–∞–º–∏ –≤—ã –≤–ª–∞–¥–µ–µ—Ç–µ?",
        'upload_resume': "–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –≤–∞—à–µ —Ä–µ–∑—é–º–µ (–µ—Å–ª–∏ –µ—Å—Ç—å):",
        'skip_resume': "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å",
        'form_completed': "–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –ø—Ä–∏–Ω—è—Ç–∞. HR-–º–µ–Ω–µ–¥–∂–µ—Ä —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç –µ—ë –∏ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ —á–µ—Ä–µ–∑ —ç—Ç–æ–≥–æ –±–æ—Ç–∞.",
        'invalid_input': "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.",
        'enter_source': "–ö–∞–∫ –≤—ã —É–∑–Ω–∞–ª–∏ –æ –≤–∞–∫–∞–Ω—Å–∏–∏?",
        'source_options': {
            'headhunter': "Head hunter",
            'facebook': "Facebook",
            'instagram': "Instagram",
            'linkedin': "Linkedin",
            'olx': "Olx",
            'university': "–í—É–∑—ã",
            'friend': "–ü—Ä–∏–≥–ª–∞—à–µ–Ω —á–µ—Ä–µ–∑ –∑–Ω–∞–∫–æ–º–æ–≥–æ",
            'telegram': "–¢–µ–ª–µ–≥—Ä–∞–º",
            'other': "–î—Ä—É–≥–∏–µ"
        },
        'choose_direction': """
*–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:*

üíº –£ –Ω–∞—Å –æ—Ç–∫—Ä—ã—Ç—ã –≤–∞–∫–∞–Ω—Å–∏–∏ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –æ—Ç–¥–µ–ª–∞—Ö:
        """,
        'production': "üè≠ –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏",
        'office': "üë®‚Äçüíº –û—Ñ–∏—Å–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏",
        'choose_vacancy': '–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–∫–∞–Ω—Å–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞:',
        'back': "üîô –ù–∞–∑–∞–¥",
        'main_menu': "üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        'fill_form': "üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É",
        'back_to_vacancies': "üìã –ö —Å–ø–∏—Å–∫—É –≤–∞–∫–∞–Ω—Å–∏–π",
    },
    'uz': {
        'welcome': """
üè¢ *Orient Metal* - Metall ishlab chiqarish sohasida ishonchli hamkoringiz!

*Biz haqimizda:*
üìà Jadal rivojlanayotgan kompaniya
üõ† Zamonaviy ishlab chiqarish
üåü Yuqori sifatli mahsulotlar
ü§ù Mijozlar uchun ishonchli yechimlar

*Bizning afzalliklarimiz:*
‚úÖ Tajribali mutaxassislar
‚úÖ Zamonaviy uskunalar
‚úÖ Individual yondashuv
‚úÖ Foydali shartlar

*Jamoamizga qo'shiling!*
üë• Biz iqtidorli va g'ayratli mutaxassislarni izlaymiz.
        """,
        'agreement_text': """
Anketani to'ldirishdan oldin, iltimos, shaxsiy ma'lumotlarni qayta ishlash to'g'risidagi kelishuv bilan tanishing.

"Qabul qilaman" tugmasini bosish orqali siz:
1. Shaxsiy ma'lumotlaringizni qayta ishlashga rozilik berasiz
2. Taqdim etilayotgan ma'lumotlarning to'g'riligini tasdiqlaysiz
3. Ma'lumotlarni qayta ishlash shartlariga rozisiz
        """,
        'accept_agreement': "‚úÖ Qabul qilaman",
        'decline_agreement': "‚ùå Rad etaman",
        'download_agreement': "üìÑ To'liq matnni yuklab olish",
        'agreement_declined': "Shaxsiy ma'lumotlarni qayta ishlashga rozilik bermasdan, biz sizning anketangizni qabul qila olmaymiz",
        'choose_language': "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Tilni tanlang:",
        'enter_fullname': "To'liq FISHingizni kiriting:",
        'enter_birthdate': "Tug'ilgan sanangizni kiriting (kk.oo.yyyy):",
        'enter_position': "Qaysi lavozimga da'vogarlik qilyapsiz?",
        'enter_speciality': "Mutaxassisligingizni kiriting:",
        'enter_education': "Ma'lumotingizni kiriting:",
        'enter_citizenship': "Fuqaroligingizni kiriting:",
        'enter_experience': "Ish tajribangizni tasvirlab bering:",
        'enter_location': "Yashash shahringizni kiriting:",
        'enter_phone': "Telefon raqamingizni kiriting:",
        'enter_languages': "Qaysi tillarda gaplasha olasiz?",
        'upload_resume': "Rezyumengizni biriktiring (agar mavjud bo'lsa):",
        'skip_resume': "O'tkazib yuborish",
        'form_completed': "Rahmat! Sizning anketangiz qabul qilindi. HR-menejer ko'rib chiqadi va siz bilan bot orqali bog'lanadi.",
        'invalid_input': "Iltimos, to'g'ri ma'lumotlarni kiriting.",
        'enter_source': "Vakansiya haqida qanday bildingiz?",
        'source_options': {
            'headhunter': "Head hunter",
            'facebook': "Facebook",
            'instagram': "Instagram",
            'linkedin': "Linkedin",
            'olx': "Olx",
            'university': "Universitetlar",
            'friend': "Tanish orqali taklif qilingan",
            'telegram': "Telegram",
            'other': "Boshqalar"
        },
        'choose_direction': """
*Yo'nalishni tanlang:*

üíº Bizda quyidagi bo'limlarda vakansiyalar mavjud:
        """,
        'production': "üè≠ Ishlab chiqarish vakansiyalari",
        'office': "üë®‚Äçüíº Ofis vakansiyalari",
        'choose_vacancy': 'Vakansiyani tanlang:',
        'back': "üîô Ortga",
        'main_menu': "üè† Asosiy menyu",
        'fill_form': "üìù Anketani to'ldirish",
        'back_to_vacancies': "üìã Vakansiyalarga qaytish",
    }
}

@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_username = message.from_user.username
    if user_username:
        candidate_chat_ids[f"@{user_username}"] = message.chat.id
        logger.info(f"Saved chat_id for @{user_username}: {message.chat.id}")

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        types.InlineKeyboardButton("–†—É—Å—Å–∫–∏–π üá∑üá∫", callback_data="lang_ru"),
        types.InlineKeyboardButton("O'zbek üá∫üáø", callback_data="lang_uz")
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —è–∑—ã–∫–∞
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Tilni tanlang:",
        reply_markup=keyboard
    )
    await Form.choosing_language.set()

@dp.callback_query_handler(lambda c: c.data.startswith('lang_'), state=Form.choosing_language)
async def process_language_choice(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞"""
    lang = callback_query.data.split('_')[1]
    await state.update_data(language=lang)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∫–æ–º–ø–∞–Ω–∏–∏
    await callback_query.message.answer(
        TEXTS[lang]['welcome'],
        parse_mode="Markdown"
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        types.InlineKeyboardButton(TEXTS[lang]['production'], callback_data='production'),
        types.InlineKeyboardButton(TEXTS[lang]['office'], callback_data='office')
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    await callback_query.message.answer(
        TEXTS[lang]['choose_direction'],
        reply_markup=keyboard,
        parse_mode="Markdown"
    )
    await Form.choosing_direction.set()
    await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data.startswith("apply_"), state=Form.viewing_vacancy)
async def start_filling_form(callback_query: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã"""
    try:
        vacancy_id = callback_query.data.split('_')[1]
        state_data = await state.get_data()
        direction = state_data.get('chosen_direction')
        language = state_data.get('language', 'ru')
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –≤–∞–∫–∞–Ω—Å–∏—é –∏ –µ—ë –Ω–∞–∑–≤–∞–Ω–∏–µ
        vacancy_data = VACANCIES[direction]["positions"][vacancy_id]
        await state.update_data(
            chosen_vacancy=vacancy_id,
            position=vacancy_data['title'][language]  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã
        keyboard = types.InlineKeyboardMarkup(row_width=1)
        keyboard.add(
            types.InlineKeyboardButton(
                TEXTS[language]['accept_agreement'],
                callback_data="accept_agreement"
            ),
            types.InlineKeyboardButton(
                TEXTS[language]['decline_agreement'],
                callback_data="decline_agreement"
            ),
            types.InlineKeyboardButton(
                TEXTS[language]['download_agreement'],
                callback_data="download_agreement"
            )
        )
        
        await callback_query.message.answer(
            TEXTS[language]['agreement_text'],
            reply_markup=keyboard
        )
        
    except Exception as e:
        logger.error(f"Error in start_filling_form: {e}")
        await callback_query.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑." if language == 'ru' else 
            "Xatolik yuz berdi. Qaytadan urinib ko'ring."
        )

@dp.callback_query_handler(lambda c: c.data == "accept_agreement", state="*")
async def process_agreement_accepted(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è —Å–æ–≥–ª–∞—à–µ–Ω–∏—è"""
    state_data = await state.get_data()
    language = state_data.get('language', 'ru')
    
    # –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã
    await callback_query.message.answer(TEXTS[language]['enter_fullname'])
    await Form.full_name.set()

@dp.callback_query_handler(lambda c: c.data == "decline_agreement", state="*")
async def process_agreement_declined(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–∞–∑–∞ –æ—Ç —Å–æ–≥–ª–∞—à–µ–Ω–∏—è"""
    state_data = await state.get_data()
    language = state_data.get('language', 'ru')
    
    await callback_query.message.answer(TEXTS[language]['agreement_declined'])
    await state.finish()

@dp.callback_query_handler(lambda c: c.data in ['production', 'office'], state=Form.choosing_direction)
async def process_direction_choice(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    state_data = await state.get_data()
    language = state_data.get('language', 'ru')
    direction = callback_query.data
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    await state.update_data(chosen_direction=direction)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞–∫–∞–Ω—Å–∏—è–º–∏
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤–∞–∫–∞–Ω—Å–∏–∏ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    for position_id, position_data in VACANCIES[direction]['positions'].items():
        keyboard.add(
            types.InlineKeyboardButton(
                position_data['title'][language],
                callback_data=f"vacancy_{position_id}"
            )
        )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    keyboard.add(
        types.InlineKeyboardButton(
            TEXTS[language]['back'],
            callback_data="back_to_start"
        )
    )
    
    await callback_query.message.edit_text(
        TEXTS[language]['choose_vacancy'],
        reply_markup=keyboard
    )
    await Form.choosing_vacancy.set()

@dp.callback_query_handler(lambda c: c.data.startswith("vacancy_"), state=Form.choosing_vacancy)
async def process_vacancy_choice(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≤–∞–∫–∞–Ω—Å–∏–∏"""
    try:
        vacancy_id = callback_query.data.split('_')[1]
        state_data = await state.get_data()
        direction = state_data.get('chosen_direction')
        language = state_data.get('language', 'ru')
        
        if direction not in VACANCIES or vacancy_id not in VACANCIES[direction]["positions"]:
            logger.error(f"Invalid vacancy ID: {vacancy_id} for direction: {direction}")
            await process_back_to_start(callback_query, state)
            return
            
        vacancy_data = VACANCIES[direction]["positions"][vacancy_id]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞
        vacancy_info = f"""
üîç <b>–í–∞–∫–∞–Ω—Å–∏—è:</b> {vacancy_data['title'][language]}

üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>
{vacancy_data['description'][language]}

üìã <b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:</b>
{vacancy_data['requirements'][language]}

üíº <b>–£—Å–ª–æ–≤–∏—è:</b>
{vacancy_data['conditions'][language]}

üïí <b>–ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã:</b>
{vacancy_data['schedule'][language]}
"""
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = types.InlineKeyboardMarkup(row_width=1)
        keyboard.add(
            types.InlineKeyboardButton(
                TEXTS[language]['fill_form'],
                callback_data=f"apply_{vacancy_id}"
            ),
            types.InlineKeyboardButton(
                TEXTS[language]['back_to_vacancies'],
                callback_data="back_to_vacancies"
            ),
            types.InlineKeyboardButton(
                TEXTS[language]['main_menu'],
                callback_data="back_to_start"
            )
        )
        
        await callback_query.message.edit_text(
            vacancy_info,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        await Form.viewing_vacancy.set()
        
    except Exception as e:
        logger.error(f"Error in process_vacancy_choice: {e}")
        await process_back_to_start(callback_query, state)

@dp.callback_query_handler(lambda c: c.data == "back_to_vacancies", state="*")
async def process_back_to_vacancies(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É –≤–∞–∫–∞–Ω—Å–∏–π"""
    try:
        state_data = await state.get_data()
        direction = state_data.get('chosen_direction')
        language = state_data.get('language', 'ru')
        
        keyboard = types.InlineKeyboardMarkup(row_width=1)
        for position_id, position_data in VACANCIES[direction]["positions"].items():
            keyboard.add(
                types.InlineKeyboardButton(
                    position_data['title'][language],
                    callback_data=f"vacancy_{position_id}"
                )
            )
        keyboard.add(
            types.InlineKeyboardButton(
                TEXTS[language]['back'],
                callback_data="back_to_start"
            )
        )
        
        await callback_query.message.edit_text(
            TEXTS[language]['choose_vacancy'],
            reply_markup=keyboard
        )
        await Form.choosing_vacancy.set()
    except Exception as e:
        logger.error(f"Error in process_back_to_vacancies: {e}")
        await process_back_to_start(callback_query, state)

@dp.message_handler(state=Form.full_name)
async def process_name(message: types.Message, state: FSMContext):
    state_data = await state.get_data()
    language = state_data.get('language', 'ru')
    
    async with state.proxy() as data:
        data['full_name'] = message.text
    await Form.birth_date.set()
    await message.answer(TEXTS[language]['enter_birthdate'])

@dp.message_handler(state=Form.birth_date)
async def process_birthdate(message: types.Message, state: FSMContext):
    state_data = await state.get_data()
    language = state_data.get('language', 'ru')
    
    async with state.proxy() as data:
        data['birth_date'] = message.text
    await Form.specialization.set()
    await message.answer(TEXTS[language]['enter_speciality'])

@dp.message_handler(state=Form.specialization)
async def process_specialization(message: types.Message, state: FSMContext):
    state_data = await state.get_data()
    language = state_data.get('language', 'ru')
    
    async with state.proxy() as data:
        data['specialization'] = message.text
    await Form.education.set()
    await message.answer(TEXTS[language]['enter_education'])

@dp.message_handler(state=Form.education)
async def process_education(message: types.Message, state: FSMContext):
    state_data = await state.get_data()
    language = state_data.get('language', 'ru')
    
    async with state.proxy() as data:
        data['education'] = message.text
    await Form.citizenship.set()
    await message.answer(TEXTS[language]['enter_citizenship'])

@dp.message_handler(state=Form.citizenship)
async def process_citizenship(message: types.Message, state: FSMContext):
    state_data = await state.get_data()
    language = state_data.get('language', 'ru')
    
    async with state.proxy() as data:
        data['citizenship'] = message.text
    await Form.experience.set()
    await message.answer(TEXTS[language]['enter_experience'])

@dp.message_handler(state=Form.experience)
async def process_experience(message: types.Message, state: FSMContext):
    state_data = await state.get_data()
    language = state_data.get('language', 'ru')
    
    async with state.proxy() as data:
        data['experience'] = message.text
    await Form.city.set()
    await message.answer(TEXTS[language]['enter_location'])

@dp.message_handler(state=Form.city)
async def process_city(message: types.Message, state: FSMContext):
    state_data = await state.get_data()
    language = state_data.get('language', 'ru')
    
    async with state.proxy() as data:
        data['city'] = message.text
    await Form.phone.set()
    await message.answer(TEXTS[language]['enter_phone'])

@dp.message_handler(state=Form.phone)
async def process_phone(message: types.Message, state: FSMContext):
    state_data = await state.get_data()
    language = state_data.get('language', 'ru')
    
    async with state.proxy() as data:
        data['phone'] = message.text
    await Form.languages.set()
    await message.answer(TEXTS[language]['enter_languages'])

@dp.message_handler(state=Form.languages)
async def process_languages(message: types.Message, state: FSMContext):
    state_data = await state.get_data()
    language = state_data.get('language', 'ru')
    
    async with state.proxy() as data:
        data['languages'] = message.text
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    for source_id, source_name in TEXTS[language]['source_options'].items():
        keyboard.add(types.InlineKeyboardButton(source_name, callback_data=f"source_{source_id}"))
    
    await message.answer(TEXTS[language]['enter_source'], reply_markup=keyboard)
    await Form.source.set()

@dp.callback_query_handler(lambda c: c.data.startswith('source_'), state=Form.source)
async def process_source(callback_query: types.CallbackQuery, state: FSMContext):
    state_data = await state.get_data()
    language = state_data.get('language', 'ru')
    source_id = callback_query.data.split('_')[1]
    
    async with state.proxy() as data:
        data['source'] = TEXTS[language]['source_options'][source_id]
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∑—é–º–µ
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        types.InlineKeyboardButton(
            "üìé –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ–∑—é–º–µ" if language == 'ru' else "üìé Rezyume yuklash",
            callback_data="upload_resume"
        ),
        types.InlineKeyboardButton(
            "‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ–∑ —Ä–µ–∑—é–º–µ" if language == 'ru' else "‚úÖ Rezyumesiz yuborish",
            callback_data="submit_without_resume"
        )
    )
    
    await callback_query.message.edit_text(TEXTS[language]['upload_resume'], reply_markup=keyboard)
    await Form.upload_resume.set()

@dp.callback_query_handler(lambda c: c.data == "upload_resume", state=Form.upload_resume)
async def request_resume(callback_query: types.CallbackQuery, state: FSMContext):
    state_data = await state.get_data()
    language = state_data.get('language', 'ru')
    
    await callback_query.message.answer(
        "üìé –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Ä–µ–∑—é–º–µ (PDF, DOC, DOCX)" if language == 'ru' else 
        "üìé Iltimos, rezyume faylini yuboring (PDF, DOC, DOCX)"
    )

def sanitize_filename(filename: str) -> str:
    """
    –°–æ–∑–¥–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞, —É–¥–∞–ª—è—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –∏ —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∏—Ä—É—è —Ä—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç
    """
    # –£–¥–∞–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    name, ext = os.path.splitext(filename)
    
    # –¢—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—è —Ä—É—Å—Å–∫–∏—Ö –±—É–∫–≤
    trans_map = {
        '–∞': 'a', '–±': 'b', '–≤': 'v', '–≥': 'g', '–¥': 'd', '–µ': 'e', '—ë': 'yo',
        '–∂': 'zh', '–∑': 'z', '–∏': 'i', '–π': 'y', '–∫': 'k', '–ª': 'l', '–º': 'm',
        '–Ω': 'n', '–æ': 'o', '–ø': 'p', '—Ä': 'r', '—Å': 's', '—Ç': 't', '—É': 'u',
        '—Ñ': 'f', '—Ö': 'h', '—Ü': 'ts', '—á': 'ch', '—à': 'sh', '—â': 'sch',
        '—ä': '', '—ã': 'y', '—å': '', '—ç': 'e', '—é': 'yu', '—è': 'ya'
    }
    
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º unicode –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä
    name = unicodedata.normalize('NFKD', name.lower())
    
    # –¢—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—è
    result = ''
    for char in name:
        if char in trans_map:
            result += trans_map[char]
        elif char.isalnum() or char in '-_':
            result += char
        else:
            result += '_'
    
    # –£–¥–∞–ª—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
    result = re.sub(r'_+', '_', result)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    return f"{result}_{timestamp}{ext}"

@dp.message_handler(content_types=['document'], state=Form.upload_resume)
async def process_resume(message: types.Message, state: FSMContext):
    try:
        state_data = await state.get_data()
        language = state_data.get('language', 'ru')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
        file_name = message.document.file_name.lower()
        logger.info(f"Processing resume file: {file_name}")
        
        if not any(file_name.endswith(ext) for ext in ['.pdf', '.doc', '.docx']):
            await message.answer(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF, DOC –∏–ª–∏ DOCX" if language == 'ru' else
                "Iltimos, PDF, DOC yoki DOCX formatidagi faylni yuboring"
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (10MB –ª–∏–º–∏—Ç)
        if message.document.file_size > 10 * 1024 * 1024:
            await message.answer(
                "–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä - 10MB" if language == 'ru' else
                "Fayl hajmi juda katta. Maksimal hajm - 10MB"
            )
            return
        
        # –°–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
        safe_filename = sanitize_filename(file_name)
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        resume_dir = Path("resumes")
        resume_dir.mkdir(exist_ok=True)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
        file_path = resume_dir / safe_filename
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
        file = await message.document.get_file()
        await file.download(destination_file=str(file_path))
        logger.info(f"Resume saved successfully to: {file_path}")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        
        # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è API
        api_data = {
            'full_name': data['full_name'],
            'birth_date': data['birth_date'],
            'position': data['position'],
            'specialization': data['specialization'],
            'education': data['education'],
            'citizenship': data['citizenship'],
            'experience': data['experience'],
            'city': data['city'],
            'phone': data['phone'],
            'telegram': f"@{message.from_user.username}" if message.from_user.username else "–ù–µ —É–∫–∞–∑–∞–Ω",
            'languages': data['languages'],
            'telegram_chat_id': str(message.chat.id),
            'source': data['source'],
            'resume_file_path': str(safe_filename)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –∏–º—è —Ñ–∞–π–ª–∞
        }
        
        logger.info(f"Sending application data to API with resume_file_path: {safe_filename}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ API
        async with aiohttp.ClientSession() as session:
            async with session.post(f"{API_URL}/applications/", json=api_data) as resp:
                if resp.status == 200:
                    response_data = await resp.json()
                    await handle_successful_form_submission(response_data['id'], message, state)
                else:
                    error_text = await resp.text()
                    logger.error(f"API error: {error_text}")
                    await message.answer(
                        "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ." if language == 'ru' else
                        "Kechirasiz, ariza yuborishda xatolik yuz berdi. Iltimos, keyinroq urinib ko'ring."
                    )
                    # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
                    file_path.unlink(missing_ok=True)
                    await state.finish()
            
    except Exception as e:
        logger.error(f"Error processing resume: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–∑—é–º–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ." if language == 'ru' else
            "Rezyumeni qayta ishlashda xatolik yuz berdi. Iltimos, keyinroq urinib ko'ring."
        )
        await state.finish()

@dp.callback_query_handler(lambda c: c.data == "submit_without_resume", state=Form.upload_resume)
async def submit_without_resume(callback_query: types.CallbackQuery, state: FSMContext):
    try:
        state_data = await state.get_data()
        language = state_data.get('language', 'ru')
        
        async with state.proxy() as data:
            api_data = {
                'full_name': data['full_name'],
                'birth_date': data['birth_date'],
                'position': data['position'],
                'specialization': data['specialization'],
                'education': data['education'],
                'citizenship': data['citizenship'],
                'experience': data['experience'],
                'city': data['city'],
                'phone': data['phone'],
                'telegram': f"@{callback_query.from_user.username}" if callback_query.from_user.username else "–ù–µ —É–∫–∞–∑–∞–Ω",
                'languages': data['languages'],
                'telegram_chat_id': str(callback_query.message.chat.id),
                'source': data['source']
            }

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ API
            async with aiohttp.ClientSession() as session:
                async with session.post(f"{API_URL}/applications/", json=api_data) as resp:
                    if resp.status == 200:
                        response_data = await resp.json()
                        await handle_successful_form_submission(response_data['id'], callback_query.message, state)
                    else:
                        await callback_query.message.edit_text(
                            "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ." if language == 'ru' else
                            "Kechirasiz, ariza yuborishda xatolik yuz berdi. Iltimos, keyinroq urinib ko'ring."
                        )
                        await state.finish()

    except Exception as e:
        logger.error(f"Error submitting form: {e}")
        await callback_query.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ä–º—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ." if language == 'ru' else
            "Forma yuborishda xatolik yuz berdi. Iltimos, keyinroq urinib ko'ring."
        )

@dp.message_handler(state="*")
async def handle_all_messages(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
    current_state = await state.get_state()
    logger.info(f"Received message in state: {current_state}")
    
    # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –∫–æ–º–∞–Ω–¥–∞
    if not message.text.startswith('/'):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞—è–≤–∫–∞
        db = SessionLocal()
        try:
            # –ò—â–µ–º –∑–∞—è–≤–∫—É –ø–æ telegram_chat_id
            application = db.query(models.Application).filter(
                models.Application.telegram_chat_id == str(message.chat.id)
            ).order_by(models.Application.created_at.desc()).first()
            
            if application:
                # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –∑–∞—è–≤–∫—É, –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                logger.info(f"Found existing application {application.id} for chat {message.chat.id}")
                await state.update_data(application_id=application.id)
                await Form.WaitingForMessage.set()
                # –ü–µ—Ä–µ–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
                await handle_candidate_message(message, state)
                return
                
        except Exception as e:
            logger.error(f"Error checking existing application: {e}")
        finally:
            db.close()
    
    if current_state is None:
        await message.answer(
            "–î–ª—è –ø–æ–¥–∞—á–∏ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏ –∏–ª–∏ –Ω–∞—á–∞–ª–∞ –æ–±—â–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start"
        )
        return

@dp.callback_query_handler(lambda c: c.data.startswith('confirm_') or c.data.startswith('reject_'), state="*")
async def process_confirmation(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        logger.info(f"–ü–æ–ª—É—á–µ–Ω callback: {callback_query.data}")
        chat_id = callback_query.from_user.id
        message_id = callback_query.message.message_id
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –¥–µ–π—Å—Ç–≤–∏—è –∏ ID –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        if '_' not in callback_query.data:
            await callback_query.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞")
            return
            
        action, confirmation_id = callback_query.data.split('_', 1)
        
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        db = SessionLocal()
        try:
            # –ò—â–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤ –ë–î –ø–æ –∫–ª—é—á—É
            confirmation = db.query(models.MessageConfirmation).filter(
                models.MessageConfirmation.confirmation_key == confirmation_id,
                models.MessageConfirmation.telegram_chat_id == str(chat_id)
            ).first()
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            try:
                from telegram_service import message_confirmations
                logger.info(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ confirmations –≤ –ø–∞–º—è—Ç–∏: {list(message_confirmations.keys())}")
            except ImportError:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å message_confirmations")
                message_confirmations = {}
            
            if confirmation:
                broadcast_id = confirmation.broadcast_id
                
                if action == 'confirm':
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                    confirmation.status = 'confirmed'
                    confirmation.confirmed_at = datetime.now()
                    
                    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π
                    broadcast = db.query(models.TelegramBroadcast).filter(
                        models.TelegramBroadcast.id == broadcast_id
                    ).first()
                    
                    if broadcast:
                        broadcast.confirmed_count += 1
                    
                    db.commit()
                    
                    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
                    await callback_query.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è!")
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, —É–±–∏—Ä–∞—è –∫–Ω–æ–ø–∫–∏
                    await bot.edit_message_reply_markup(
                        chat_id=chat_id,
                        message_id=message_id,
                        reply_markup=None
                    )
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–º–µ—Ç–∫—É –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏
                    await bot.edit_message_text(
                        chat_id=chat_id,
                        message_id=message_id,
                        text=callback_query.message.text + "\n\n‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ",
                        parse_mode='HTML'
                    )
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ —Å–ª–æ–≤–∞—Ä–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π, –µ—Å–ª–∏ –æ–Ω —Ç–∞–º –µ—Å—Ç—å
                    if confirmation_id in message_confirmations:
                        message_confirmations[confirmation_id]['status'] = 'confirmed'
                        message_confirmations[confirmation_id]['confirmed_at'] = datetime.now().isoformat()
                    
                elif action == 'reject':
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                    confirmation.status = 'rejected'
                    confirmation.confirmed_at = datetime.now()
                    db.commit()
                    
                    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
                    await callback_query.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –Ω–µ —Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, —É–±–∏—Ä–∞—è –∫–Ω–æ–ø–∫–∏
                    await bot.edit_message_reply_markup(
                        chat_id=chat_id,
                        message_id=message_id,
                        reply_markup=None
                    )
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–º–µ—Ç–∫—É –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏
                    await bot.edit_message_text(
                        chat_id=chat_id,
                        message_id=message_id,
                        text=callback_query.message.text + "\n\n‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ",
                        parse_mode='HTML'
                    )
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ —Å–ª–æ–≤–∞—Ä–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π, –µ—Å–ª–∏ –æ–Ω —Ç–∞–º –µ—Å—Ç—å
                    if confirmation_id in message_confirmations:
                        message_confirmations[confirmation_id]['status'] = 'rejected'
                        message_confirmations[confirmation_id]['rejected_at'] = datetime.now().isoformat()
            else:
                # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –≤ —Å–ª–æ–≤–∞—Ä–µ (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
                if confirmation_id in message_confirmations:
                    logger.info(f"–ù–∞–π–¥–µ–Ω–æ –≤ message_confirmations –≤–º–µ—Å—Ç–æ –ë–î: {confirmation_id}")
                    confirmation_info = message_confirmations[confirmation_id]
                    broadcast_id = confirmation_info.get('broadcast_id')
                    
                    if action == 'confirm':
                        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏
                        if broadcast_id:
                            confirmation = models.MessageConfirmation(
                                broadcast_id=broadcast_id,
                                telegram_chat_id=str(chat_id),
                                confirmation_key=confirmation_id,
                                status='confirmed',
                                confirmed_at=datetime.now(),
                                message_id=message_id
                            )
                            db.add(confirmation)
                            
                            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π
                            broadcast = db.query(models.TelegramBroadcast).filter(
                                models.TelegramBroadcast.id == broadcast_id
                            ).first()
                            
                            if broadcast:
                                broadcast.confirmed_count += 1
                            
                            db.commit()
                        
                        # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
                        await callback_query.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è!")
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, —É–±–∏—Ä–∞—è –∫–Ω–æ–ø–∫–∏
                        await bot.edit_message_reply_markup(
                            chat_id=chat_id,
                            message_id=message_id,
                            reply_markup=None
                        )
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–º–µ—Ç–∫—É –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏
                        await bot.edit_message_text(
                            chat_id=chat_id,
                            message_id=message_id,
                            text=callback_query.message.text + "\n\n‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ",
                            parse_mode='HTML'
                        )
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ —Å–ª–æ–≤–∞—Ä–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π
                        message_confirmations[confirmation_id]['status'] = 'confirmed'
                        message_confirmations[confirmation_id]['confirmed_at'] = datetime.now().isoformat()
                    elif action == 'reject':
                        # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
                        if broadcast_id:
                            confirmation = models.MessageConfirmation(
                                broadcast_id=broadcast_id,
                                telegram_chat_id=str(chat_id),
                                confirmation_key=confirmation_id,
                                status='rejected',
                                confirmed_at=datetime.now(),
                                message_id=message_id
                            )
                            db.add(confirmation)
                            db.commit()
                        
                        # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
                        await callback_query.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –Ω–µ —Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, —É–±–∏—Ä–∞—è –∫–Ω–æ–ø–∫–∏
                        await bot.edit_message_reply_markup(
                            chat_id=chat_id,
                            message_id=message_id,
                            reply_markup=None
                        )
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–º–µ—Ç–∫—É –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏
                        await bot.edit_message_text(
                            chat_id=chat_id,
                            message_id=message_id,
                            text=callback_query.message.text + "\n\n‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ",
                            parse_mode='HTML'
                        )
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ —Å–ª–æ–≤–∞—Ä–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π
                        message_confirmations[confirmation_id]['status'] = 'rejected'
                        message_confirmations[confirmation_id]['rejected_at'] = datetime.now().isoformat()
                else:
                    await callback_query.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                    logger.warning(f"Confirmation ID –Ω–µ –Ω–∞–π–¥–µ–Ω: {confirmation_id}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.")
        finally:
            db.close()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {str(e)}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")

@dp.message_handler(state=Form.WaitingForMessage)
async def handle_candidate_message(message: types.Message, state: FSMContext):
    logger.info(f"Received message from candidate: {message.text}")
    async with state.proxy() as data:
        application_id = data.get('application_id')
        logger.info(f"Application ID from state: {application_id}")
        
        # –ï—Å–ª–∏ ID –∑–∞—è–≤–∫–∏ –Ω–µ—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –µ–≥–æ –≤ –±–∞–∑–µ
        if not application_id:
            db = SessionLocal()
            try:
                application = db.query(models.Application).filter(
                    models.Application.telegram_chat_id == str(message.chat.id)
                ).order_by(models.Application.created_at.desc()).first()
                
                if application:
                    application_id = application.id
                    await state.update_data(application_id=application_id)
                else:
                    logger.error("No application found for this chat")
                    await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /start")
                    await state.finish()
                    return
            except Exception as e:
                logger.error(f"Error finding application: {e}")
                await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /start")
                await state.finish()
                return
            finally:
                db.close()
        
        db = SessionLocal()
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏
            application = db.query(models.Application).filter(models.Application.id == application_id).first()
            if not application:
                logger.error(f"Application {application_id} not found")
                await message.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /start")
                await state.finish()
                return

            logger.info(f"Creating message for application {application_id}")
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            db_message = models.Message(
                application_id=application_id,
                content=message.text,
                sender='candidate',
                is_read=False,
                delivery_status='pending'
            )
            db.add(db_message)
            db.commit()
            db.refresh(db_message)
            logger.info(f"Message saved to database with id {db_message.id}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ WebSocket
            try:
                logger.info("Sending WebSocket notification")
                async with aiohttp.ClientSession() as session:
                    notification_data = {
                        "type": "new_message",
                        "application_id": application_id,
                        "message": {
                            "id": db_message.id,
                            "content": message.text,
                            "sender": "candidate",
                            "created_at": db_message.created_at.isoformat(),
                            "is_read": False
                        }
                    }
                    logger.info(f"Notification data: {notification_data}")
                    response = await session.post(
                        f"{API_URL}/notify",
                        json=notification_data
                    )
                    logger.info(f"WebSocket notification response status: {response.status}")
                    if response.status == 200:
                        await message.answer("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ HR-–º–µ–Ω–µ–¥–∂–µ—Ä—É")
                    else:
                        response_text = await response.text()
                        logger.error(f"WebSocket notification failed with status {response.status}: {response_text}")
                        raise Exception(f"WebSocket notification failed: {response.status}")
            except Exception as e:
                logger.error(f"Error sending WebSocket notification: {str(e)}")
                db_message.delivery_status = 'failed'
                db.commit()
                await message.answer("‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ, –Ω–æ –º–æ–≥—É—Ç –±—ã—Ç—å –∑–∞–¥–µ—Ä–∂–∫–∏ –≤ –¥–æ—Å—Ç–∞–≤–∫–µ")
            
        except Exception as e:
            logger.error(f"Error saving candidate message: {str(e)}")
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
            db.rollback()
        finally:
            db.close()

# –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
async def handle_successful_form_submission(application_id: int, message: types.Message, state: FSMContext):
    """–û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã"""
    logger.info(f"Setting up chat state for application {application_id}")
    await state.update_data(application_id=application_id)
    await Form.WaitingForMessage.set()
    await message.answer("–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –ø—Ä–∏–Ω—è—Ç–∞. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—â–∞—Ç—å—Å—è —Å HR-–º–µ–Ω–µ–¥–∂–µ—Ä–æ–º —á–µ—Ä–µ–∑ —ç—Ç–æ—Ç —á–∞—Ç.")

async def send_message_to_candidate(application_id: int, message_content: str):
    db = SessionLocal()
    try:
        application = db.query(models.Application).filter(models.Application.id == application_id).first()
        if not application or not application.telegram_chat_id:
            logger.error(f"Application {application_id} not found or no chat_id")
            return False
            
        await bot.send_message(
            chat_id=application.telegram_chat_id,
            text=f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç HR:\n{message_content}"
        )
        return True
        
    except Exception as e:
        logger.error(f"Error sending message to candidate: {e}")
        return False
    finally:
        db.close()

if __name__ == '__main__':
    from aiogram import executor
    
    # –ë–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–æ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–∑ telegram_service,
    # —Ç–∞–∫ –∫–∞–∫ —Ç–µ–ø–µ—Ä—å –æ–Ω–∏ –≤—Å—Ç—Ä–æ–µ–Ω—ã –Ω–∞–ø—Ä—è–º—É—é –≤ —Ñ–∞–π–ª bot.py
    
    executor.start_polling(dp, skip_updates=True) 